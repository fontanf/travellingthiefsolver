#include "travellingthiefsolver/packing_while_travelling/instance.hpp"

#include "travellingthiefsolver/packing_while_travelling/instance_builder.hpp"

#include "optimizationtools/containers/indexed_set.hpp"

#include <iomanip>
#include <fstream>

using namespace travellingthiefsolver::packing_while_travelling;

std::ostream& Instance::format(
        std::ostream& os,
        int verbosity_level) const
{
    if (verbosity_level >= 1) {
        os
            << "Number of cities:   " << number_of_cities() << std::endl
            << "Number of items:    " << number_of_items() << std::endl
            << "Distance:           " << distance() << std::endl
            << "Capacity:           " << capacity() << std::endl
            << "Minimum speed:      " << speed_min_ << std::endl
            << "Maximum speed:      " << speed_max_ << std::endl
            << "Renting ratio:      " << renting_ratio_ << std::endl
            << "City weight:        " << city_weight() << std::endl
            << "Total weight:       " << total_weight_ << std::endl
            << "Weight ratio:       " << (double)total_weight_ / capacity() << std::endl
            << "Total item profit:  " << total_item_profit() << std::endl
            ;
    }

    if (verbosity_level >= 2) {
        os << std::endl
            << std::setw(12) << "City"
            << std::setw(12) << "Distance"
            << std::setw(12) << "# items"
            << std::endl
            << std::setw(12) << "------"
            << std::setw(12) << "--------"
            << std::setw(12) << "-------"
            << std::endl;
        for (CityId city_id = 0;
                city_id < number_of_cities();
                ++city_id) {
            const City& city = this->city(city_id);
            os
                << std::setw(12) << city_id
                << std::setw(12) << city.distance
                << std::setw(12) << city.item_ids.size()
                << std::endl;
        }
    }

    if (verbosity_level >= 2) {
        os << std::endl
            << std::setw(12) << "Item"
            << std::setw(12) << "City"
            << std::setw(12) << "Weight"
            << std::setw(12) << "Profit"
            << std::endl
            << std::setw(12) << "----"
            << std::setw(12) << "--------"
            << std::setw(12) << "------"
            << std::setw(12) << "------"
            << std::endl;
        for (ItemId item_id = 0;
                item_id < number_of_items();
                ++item_id) {
            const Item& item = this->item(item_id);
            os
                << std::setw(12) << item_id
                << std::setw(12) << item.city_id
                << std::setw(12) << item.weight
                << std::setw(12) << item.profit
                << std::endl;
        }
    }

    return os;
}

void Instance::write(
        const std::string& instance_path) const
{
    if (instance_path.empty())
        return;
    std::ofstream file(instance_path);
    if (!file.good()) {
        throw std::runtime_error(
                "Unable to open file \"" + instance_path + "\".");
    }

    file << "NAME: XXX" << std::endl;
    file << "COMMENT: generated by fontanf/travellingthiefsolver" << std::endl;
    file << "TYPE: TSP" << std::endl;
    file << "DIMENSION: " << number_of_cities() << std::endl;
    file << "MIN SPEED: " << speed_min_ << std::endl;
    file << "MAX SPEED: " << speed_max_ << std::endl;
    file << "RENTING RATIO: " << renting_ratio_ << std::endl;
    file << "NUMBER OF ITEMS: " << number_of_items() << std::endl;
    file << "CAPACITY OF KNAPSACK: " << capacity() << std::endl;
    file << "EDGE_WEIGHT_SECTION" << std::endl;
    for (CityId city_id = 0;
            city_id < number_of_cities();
            ++city_id) {
        file << city_id + 1 << " " << city(city_id).distance << std::endl;
    }
    file << "ITEMS SECTION (INDEX, PROFIT, WEIGHT, ASSIGNED NODE NUMBER): " << std::endl;
    for (ItemId item_id = 0;
            item_id < number_of_items();
            ++item_id) {
        const Item& item = this->item(item_id);
        file
            << item_id + 1 << " "
            << item.profit << " "
            << item.weight << " "
            << item.city_id + 1 << std::endl;
    }
    file << "EOF" << std::endl;
}
