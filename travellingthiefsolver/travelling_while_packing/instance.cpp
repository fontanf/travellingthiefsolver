#include "travellingthiefsolver/travelling_while_packing/instance.hpp"

#include <iomanip>

using namespace travellingthiefsolver::travelling_while_packing;

std::ostream& Instance::format(
        std::ostream& os,
        int verbosity_level) const
{
    if (verbosity_level >= 1) {
        os
            << "Number of cities:  " << number_of_cities() << std::endl
            << "Minimum speed:     " << speed_min_ << std::endl
            << "Maximum speed:     " << speed_max_ << std::endl
            << "Renting ratio:     " << renting_ratio_ << std::endl
            << "Total weight:      " << total_weight() << std::endl
            << "Capacity:          " << capacity() << std::endl
            ;
    }

    if (verbosity_level >= 2) {
        os << std::endl
            << std::setw(12) << "City"
            << std::setw(12) << "Weight"
            << std::endl
            << std::setw(12) << "------"
            << std::setw(12) << "------"
            << std::endl;
        for (CityId city_id = 0;
                city_id < number_of_cities();
                ++city_id) {
            const City& city = this->city(city_id);
            os
                << std::setw(12) << city_id
                << std::setw(12) << city.weight
                << std::endl;
        }
    }

    distances_->format(os, verbosity_level);

    return os;
}

void Instance::write(
        const std::string& instance_path) const
{
    if (instance_path.empty())
        return;
    std::ofstream file(instance_path);
    if (!file.good()) {
        throw std::runtime_error(
                "Unable to open file \"" + instance_path + "\".");
    }

    file << "NAME: XXX" << std::endl;
    file << "COMMENT: generated by fontanf/travellingthiefsolver" << std::endl;
    file << "TYPE: TRAVELLING WHILE PACKING" << std::endl;
    file << "DIMENSION: " << number_of_cities() << std::endl;
    file << "CAPACITY OF KNAPSACK: " << capacity() << std::endl;
    file << "MIN SPEED: " << speed_min_ << std::endl;
    file << "MAX SPEED: " << speed_max_ << std::endl;
    file << "RENTING RATIO: " << renting_ratio_ << std::endl;
    file << "WEIGHTS SECTION: " << renting_ratio_ << std::endl;
    // TODO
    distances().write(file);
    file << "EOF" << std::endl;
}
