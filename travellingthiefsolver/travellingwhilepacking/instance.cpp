#include "travellingthiefsolver/travellingwhilepacking/instance.hpp"

#include "optimizationtools/utils/utils.hpp"

using namespace travellingthiefsolver::travellingwhilepacking;

std::ostream& Instance::print(
        std::ostream& os,
        int verbose) const
{
    if (verbose >= 1) {
        os
            << "Number of cities:  " << number_of_cities() << std::endl
            << "Minimum speed:     " << speed_min_ << std::endl
            << "Maximum speed:     " << speed_max_ << std::endl
            << "Renting ratio:     " << renting_ratio_ << std::endl
            << "Total weight:      " << total_weight() << std::endl
            << "Capacity:          " << capacity() << std::endl
            ;
    }

    if (verbose >= 2) {
        os << std::endl
            << std::setw(12) << "City"
            << std::setw(12) << "Weight"
            << std::endl
            << std::setw(12) << "------"
            << std::setw(12) << "------"
            << std::endl;
        for (CityId city_id = 0;
                city_id < number_of_cities();
                ++city_id) {
            const City& city = this->city(city_id);
            os
                << std::setw(12) << city_id
                << std::setw(12) << city.weight
                << std::endl;
        }
    }

    if (verbose >= 3) {
        os << std::endl
            << std::setw(12) << "City 1"
            << std::setw(12) << "City 2"
            << std::setw(12) << "Distance"
            << std::endl
            << std::setw(12) << "------"
            << std::setw(12) << "------"
            << std::setw(12) << "--------"
            << std::endl;
        for (CityId city_id_1 = 0;
                city_id_1 < number_of_cities();
                ++city_id_1) {
            for (CityId city_id_2 = city_id_1 + 1;
                    city_id_2 < number_of_cities();
                    ++city_id_2) {
                os
                    << std::setw(12) << city_id_1
                    << std::setw(12) << city_id_2
                    << std::setw(12) << distances().distance(city_id_1, city_id_2)
                    << std::endl;
            }
        }
    }

    return os;
}

void Instance::write(
        std::string instance_path) const
{
    if (instance_path.empty())
        return;
    std::ofstream file(instance_path);
    if (!file.good()) {
        throw std::runtime_error(
                "Unable to open file \"" + instance_path + "\".");
    }

    file << "NAME: XXX" << std::endl;
    file << "COMMENT: generated by fontanf/travellingthiefsolver" << std::endl;
    file << "TYPE: TRAVELLING WHILE PACKING" << std::endl;
    file << "DIMENSION: " << number_of_cities() << std::endl;
    file << "CAPACITY OF KNAPSACK: " << capacity() << std::endl;
    file << "MIN SPEED: " << speed_min_ << std::endl;
    file << "MAX SPEED: " << speed_max_ << std::endl;
    file << "RENTING RATIO: " << renting_ratio_ << std::endl;
    file << "WEIGHTS SECTION: " << renting_ratio_ << std::endl;
    // TODO
    distances().write(file);
    file << "EOF" << std::endl;
}

void travellingthiefsolver::travellingwhilepacking::init_display(
        const Instance& instance,
        optimizationtools::Info& info)
{
    info.os()
        << "=====================================" << std::endl
        << "        TravellingThiefSolver        " << std::endl
        << "=====================================" << std::endl
        << std::endl
        << "Problem" << std::endl
        << "-------" << std::endl
        << "Travelling while packing problem" << std::endl
        << std::endl
        << "Instance" << std::endl
        << "--------" << std::endl;
    instance.print(info.os(), info.verbosity_level());
    info.os() << std::endl;
}
